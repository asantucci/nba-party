\documentclass[12pt]{article}  

\usepackage{algorithm2e} 
\usepackage{amsmath} 
\usepackage{amsthm} 
\usepackage{amsfonts} 
\usepackage{bbm} 
\usepackage{color,soul} 
\usepackage{framed} 
\usepackage[margin=0.5in]{geometry} 
\usepackage{hyperref} 
\usepackage{mathtools} 
\usepackage[dvipsnames]{xcolor}  

\newtheorem{theorem}{Theorem}[section] 
\newtheorem{lemma}[theorem]{Lemma} 
\newtheorem{proposition}[theorem]{Proposition} 
\newtheorem{corollary}[theorem]{Corollary}  
\newcommand{\D}{\mathrm{d}} 

\DeclarePairedDelimiter{\ceil}{\lceil}{\rceil} 
\DeclarePairedDelimiter{\floor}{\lfloor}{\rfloor}

\SetKwInput{KwInput}{Input} 
\SetKwInput{KwOutput}{Output}  

\begin{document}

\title{\textbf{NBA Party}}
\author{Andreas Santucci, Eric Lax}
\date{April 2017}
\maketitle

<<echo=F,results='hide'>>=

require(data.table)
require(ggplot2)
require(magrittr)
require(sampling)
set.seed(4052017)

load(file = 'tmp_data/covers_lines.RData')
load(file = 'tmp_data/nmusician_estabs.RData')
load(file = 'tmp_data/population_by_county_year.RData')

musicians <- merge(musicians, pop, by = c('county', 'season'), all.x = T)

@ 

\section*{Data Sources} 

\paragraph{Lines data} We obtained data from \href{http://www.covers.com/sports/NBA/matchups?selectedDate=2011-1-01}{Covers.com}, which records the outcome of each game alongside the line set by a betting house.
<<echo=F>>=
lines[, list(date, team, opponent, line, score)]
@ 

\paragraph{BLS data} We also obtained data from
\href{https://www.bls.gov/data/}{Bureau of Labor Statistics} which records the number of establishments by business type at the county-quarter level. \ul{As a 
proxy for how much night-life there is in a city, we look toward the 
number of sound recording studios, musical groups, and music publishers there 
are for a particular county-year}: we simply calculate the average number of establishments across all three music categories listed above.\footnote{We caveat that since the Toronto Raptors are located in Canada, we don't have BLS data for this team.}

<<echo=F>>=
musicians[, county := gsub(' (county)|(division),.*$', '', county, ignore.case = T)]
musicians[, list(county, team, season, nmusicians = round(nmusicians, 1))]
@ 

We then merge this in with our lines data, taking care to do so according to the
last game's location. We also lag our BLS data by one year.
To this data, we've created features such as 
the number of days since last game, the last game location, the travel distance, and
average age\footnote{We use $\log \textrm{\# days old}$, at the time the game is played.}.


<<echo=2>>=
### Merge lines data with BLS data.
lines <- merge(lines, musicians,
               by.x = c('season', 'last.game.loc'),
               by.y = c('season', 'team'), all.x = T)

setkey(lines, season, team, date)
lines[, list(date, team, opponent, location, 
             line, score, outcome, nhours.lgame, 
             travel.dist, avg.age, nmusicians)]

@ 

Our data range from 2010-2011 season through present, which includes part of the 2016-2017 season.

\subsection*{What cities have nightlife?}

We examine which cities have a notable nightlife, as measured by our proxy.

<<>>= 
musicians[, list(average.nmusicians = mean(nmusicians) %>% round(., digits = 1)),
          by = team][order(average.nmusicians)]
@ 

Los Angeles stands out, as does New York. Some runner ups include Chicago and Miami. 

\subsection*{A significant model} We keep things simple, and try to explain the likelihood
of meeting the spread as a function of whether a team visited a city with an active night-life
the day before.

<<echo=-4>>= 

HOURS <- 24
lines[, party := ifelse(nhours.lgame <= HOURS, nmusicians, 0)]

m <- glm(outcome == 'W' ~ party + nhours.lgame + travel.dist + avg.age, 
         data = lines[season < 2017 & last.game.loc != team])

summary(m)

@ 

The sign of our ``\texttt{party}'' variable is intuitively correct, and 
statistically significant. 

\subsection*{A model worth betting on}
If we re-train an even simpler model, we obtain fantastic betting performance.

<<>>=
HOURS <- 36
m <- glm(outcome == 'W' ~ I(nmusicians*(nhours.lgame <= HOURS)), 
         data = lines[season < 2017 & last.game.loc != team])

summary(m)$coef %>% round(., 5)

### We're only interested in making predictions when teams party.
p <- predict(m, newdata = lines[season == 2017 & nhours.lgame <= HOURS & last.game.loc != team], 
             type = 'response')
table(round(p), lines[season == 2017 & nhours.lgame <= HOURS & last.game.loc != team, outcome])

@ 

<<>>=

require(lubridate)

##################################################
### Total Points Allowed
##################################################

lines[, tpa := team.pts.admitted - mean(team.pts.admitted), by = list(team, season)]
lines[, tps := team.pts.scored   - mean(team.pts.scored), by = list(team, season)]

lm(tpa ~ last.game.time:party + I(hour(date))  + nhours.lgame, data = lines[nhours.lgame <= HOURS & last.game.loc != team]) %>% summary
#lm(tps ~ party, data = lines) %>% summary

## lines[nhours.lgame <= 36, mean(tpa), by = last.game.loc][order(V1)]
## lines[nhours.lgame <= 36, mean(tps), by = last.game.loc][order(V1)]
## lines[nhours.lgame <= 36, mean(tps) - mean(tpa), by = last.game.loc][order(V1)]

##################################################
### musicians per log population
##################################################

HOURS <- 24
lines[, party := ifelse(nhours.lgame <= HOURS, nmusicians / log(population), 0)]
m <- glm(outcome == 'W' ~ party + nhours.lgame + travel.dist + avg.age, 
         data = lines[season < 2017 & last.game.loc != team])

summary(m)

##################################################
### ESPN
##################################################

espn <- fread('tmp_data/espn_player_data.csv')
espn[, date := as.Date(date)]
lines[, simple.date := as.character(date) %>% substr(., 1, 10) %>% as.Date]
data <- merge(lines, espn, by.x = c('team', 'simple.date'), by.y = c('team', 'date'), all.x = T) ### Careful which obs we keep!

data[, dmeaned.free  := free.made/min - mean(free.made/min), by = list(starters, season)]
data[, dmeaned.three := three.made/min - mean(three.made/min), by = list(starters, season)]
data[, dmeaned.reb   := reb / min - mean(reb / min), by = list(starters, season)]
data[, dmeaned.oreb   := oreb / min - mean(oreb / min), by = list(starters, season)]
data[, dmeaned.dreb   := dreb / min - mean(dreb / min), by = list(starters, season)]
data[, dmeaned.pts   := pts / min - mean(pts / min,na.rm=T), by = list(starters, season)]

data[, chg.pos := three.made + fg.made + free.attempted/2 + 
           to + (fg.attempted-fg.made + three.attempted - three.made - oreb)]

changes <- data[, list(ttl.chg.pos = sum(chg.pos)), 
            keyby = list(season, team, date, opponent)]
lines <- merge(lines, changes, by = c('season', 'team', 'date', 'opponent'))

setkey(lines, season, team, date)
lines[, lag.chg.pos := c(NA, lag(ttl.chg.pos)[1:.N-1]), by = list(season, team)]

glm(outcome == 'W' ~ party + nhours.lgame + I(log(travel.dist+1)) + lag.chg.pos,
    data = lines[season < 2017 & last.game.loc != team], family = 'binomial') %>% summary


setnames(data, '+/-', 'pm')

lm(dmeaned.three ~ party, data = data[season < 2017 & last.game.loc != team]) %>% summary
lm(dmeaned.reb ~ party, data = data[season < 2017 & last.game.loc != team]) %>% summary
lm(dmeaned.dreb ~ party, data = data[season < 2017 & last.game.loc != team]) %>% summary

data[, pm := as.numeric(pm)]
data[, pf := as.numeric(pf)]
### WOW! Earn 1-2 points less per minute on average. (Further condition on player position?)
### Next goal: we should be able to recover our grand mean estimate above. That is, test model efficacy 
### by predicting the number of points a team will score using ex-ante minutes of play-time.
lm(I(pm / min) ~ party, data = data[season < 2017 & last.game.loc != team]) %>% summary

lm(dmeaned.pts ~ party, data = data[season < 2017 & last.game.loc != team]%>%na.omit) %>% summary

## data[grep("(los angeles)|(new york)|(brooklyn)", last.game.loc), 
##      list(average.dmeaned.dreb = mean(dmeaned.dreb)), by = starters][order(average.dmeaned.dreb)] %>%
##     write.csv(., file = 'dmeaned.dreb.csv')

## data[grep("(los angeles)|(new york)|(brooklyn)", last.game.loc), 
##      list(average.dmeaned.pts = mean(dmeaned.pts)), by = starters][order(average.dmeaned.pts)] %>%
##     write.csv(., file = 'dmeaned.pts.csv')


@ 

\end{document}
